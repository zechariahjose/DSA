#include <stdio.h>
#include <stdlib.h>

#define LENGTH 10

typedef struct {
    int *elemPtr;
    int count;
    int max;
    
}List;

List resize(List L){
    L.max *= 2;

    int *newElemPtr = malloc(L.max * sizeof(int));
    if (newElemPtr == NULL) {
        printf("Memory allocation failed!\n");
        exit(1); 
    }

    for (int i = 0; i < L.count; i++) {
        newElemPtr[i] = L.elemPtr[i];
    }

    free(L.elemPtr);

    L.elemPtr = newElemPtr;

    return L;

}

List initialize(List L){
    L.elemPtr = malloc(LENGTH*sizeof(int));
    L.max = LENGTH;
    L.count = 0;
    
    return L;
}

List insertPos(List L, int data, int position){
    if(position < 0 || position > L.count){
        printf("Invalid position\n");
        return;
    }
    
    if (L.count == L.max) {
        L = resize(L);
    }
    
    L.elemPtr[position] = data;
    (*L.count)++;
    
    
    return L;
}

List deletePos(List L, int position){
    if (position < 0 || position >= L->count) {
        printf("Invalid position\n");
        return;
    }

    for (int i = position; i < L->count - 1; i++) {
        L->elem[i] = L->elem[i + 1];
    }
    L->count--;
    
}


int locate(List L, int data){
    
    for(int i - 0; i<L.count; i++){
        if(L.elemPtr[i] == data){
            return i;
        }
    }    
    
    return -1;
}


List  insertSorted(List L, int data){
    
    if(L.count >= L.max){
        printf("List is full\n");
        return;
    }
    
    int pos = 0;
    while (pos < L->count && L->elem[pos] < data) {
        pos++;
    }

    for (int i = L->count; i > pos; i--) {
        L->elem[i] = L->elem[i - 1];
    }

    L->elem[pos] = data;
    L->count++;
    
}

void display(List L){
    
    for (int i = 0; i < L->count; i++) {
        printf("%d", L->elem[i]);
        if (i < L->count - 1) {
            printf(", ");
        }
    }
    printf("\n");
    
}


int main() {
    List myList = initialize((List){0}); 
    myList = insertPos(myList, 90, 0);
    myList = insertPos(myList, 20, 1);
    myList = insertPos(myList, 60, 2);
    myList = insertPos(myList, 10, 3);
    myList = insertPos(myList, 50, 4);

    printf("List after insertions: ");
    display(myList);

    myList = deletePos(myList, 1);
    printf("List after deleting position 1: ");
    display(myList);

    int loc = locate(myList, 10);
    printf("Location of 10: %d\n", loc);

    printf("Retrieve element at pos 2: %d\n", retrieve(myList, 2));

    myList = insertSorted(myList, 30);
    printf("List after sorted insert of 30: ");
    display(myList);

    makeNULL(myList);
    printf("List after makeNULL: ");
    display(myList);

    return 0;
}
